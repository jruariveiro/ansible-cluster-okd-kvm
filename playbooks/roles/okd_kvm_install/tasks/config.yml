---

- name: config | Configurar o caminho do socket no libvirtd.conf
  lineinfile:
    path: /etc/libvirt/libvirtd.conf
    insertafter: '^#unix_sock_dir ='
    regexp: '^unix_sock_dir ='
    line: unix_sock_dir = "{{ kvm_host_socket_dir }}"
  when: kvm_host_socket_dir | length > 0
  notify: restart libvirt

- name: config | Criar diretório para o libvirt socket
  file:
    state: directory
    path: "{{ kvm_host_socket_dir }}"
    owner: root
    group: root
    mode: 0755
  when: kvm_host_socket_dir | length > 0

- name: config | Incluir o usuário ao grupo libvirt
  user:
    name: '{{ ansible_user }}'
    groups: libvirt
    append: yes
    state: present

- name: config | Incluir o usuário ao grupo cockpit
  user:
    name: '{{ ansible_user }}'
    groups: cockpit-ws
    append: yes
    state: present

- name: config | Processar argumentos extras
  lineinfile: "{{ rule.args }}"
  become: true
  loop: "{{ kvm_host_lineinfile_extra_rules | default([]) }}"
  loop_control:
    loop_var: rule
  when: rule.condition
  notify:
    - restart libvirt

- name: config | Criar regra de firewalld para o cockpit
  firewalld:
    service: cockpit
    zone: public
    permanent: yes
    state: enabled
  when: kvm_host_require_cockpit
  notify:
    - restart cockpit

- name: Flush handlers
  meta: flush_handlers

- name: config | Verificar se o serviço libvirt daemon está ativo
  service:
    name: libvirtd
    state: started
    enabled: True

- name: config | Verificar se o serviço tuned daemon está ativo
  service:
    name: tuned
    state: started
    enabled: True

- name: config | Verificar se o serviço cockpit daemon está ativo
  service:
    name: cockpit.socket
    state: started
    enabled: True
    use: service
  when: kvm_host_require_cockpit