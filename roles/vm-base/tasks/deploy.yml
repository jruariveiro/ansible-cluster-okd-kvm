---

- name: deploy | Assegurar que a VM esta definida
  virt:
    name: "{{ vm_base.name }}"
    command: define
    xml: "{{ lookup('template', 'cloud-init/vm-template.xml.j2') }}"

- name: deploy | Iniciar a VM no KVM
  virt:
    name: "{{ vm_base.name }}"
    autostart: "{{ vm_base.autostart | d('True') }}"
    state: "{{ 'running' if (start | d('True')) else 'shutdown' }}"

- name: deploy | Capturar o endereço MAC da VM
  shell: >
     virsh --connect qemu:///system dumpxml {{ vm_base.name }} | awk -F\' '/mac address/ {print $2}'
  register: mac_info

- name: deploy | Aguardar pela conexão com a VM
  wait_for:
    path: "/var/lib/libvirt/dnsmasq/virbr1.status"
    search_regex: "{{ mac_info.stdout }}"

- name: deploy | Capturar o endereço IP da VM
  shell: >
     grep -B1 {{ mac_info.stdout }} /var/lib/libvirt/dnsmasq/virbr1.status | head -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//
  register: vm_ip

- name: deploy | Ejetar o cd-rom da VM
  shell: "virsh --connect qemu:///system change-media {{ vm_base.name }} sda --eject --config"

- name: deploy | Incluir o endereço IP da VM no known_hosts
  shell: "ssh-keyscan -t rsa {{ vm_ip.stdout }}  >> ~/.ssh/known_hosts"
  become: false
  ignore_errors: yes
  register: add_known_host
  until: "add_known_host is succeeded and not add_known_host.stderr.find('refused') != -1"
  retries: 180
  delay: 5

- name: deploy | Remover o endereço MAC da eth0 na VM
  shell: "ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ vm_ip.stdout }} -- sudo sed '/HWADDR/d'  -i /etc/sysconfig/network-scripts/ifcfg-eth0"
  ignore_errors: yes
  become: false
  register: remove_mac
  until: remove_mac is succeeded
  retries: 180
  delay: 5
